      subroutine LMEMonitorCancel(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMEReasonViewFromOptions(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMECreate(a,b,z)
      use slepclmedef
       integer a ! MPI_Comm
       LME b ! LME
       integer z
       end subroutine
      subroutine LMEReset(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMEDestroy(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMESetBV(a,b,z)
      use slepclmedef
       LME a ! LME
       BV b ! BV
       integer z
       end subroutine
      subroutine LMEGetBV(a,b,z)
      use slepclmedef
       LME a ! LME
       BV b ! BV
       integer z
       end subroutine
      subroutine LMESetUp(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMESetCoefficients(a,b,c,d,e,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
       integer z
       end subroutine
      subroutine LMEGetCoefficients(a,b,c,d,e,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
       integer z
       end subroutine
      subroutine LMESetRHS(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       integer z
       end subroutine
      subroutine LMEGetRHS(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       integer z
       end subroutine
      subroutine LMESetSolution(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       integer z
       end subroutine
      subroutine LMEGetSolution(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       integer z
       end subroutine
      subroutine LMEAllocateSolution(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine LMESetFromOptions(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMESetProblemType(a,b,z)
      use slepclmedef
       LME a ! LME
       LMEProblemType b ! LMEProblemType
       integer z
       end subroutine
      subroutine LMEGetProblemType(a,b,z)
      use slepclmedef
       LME a ! LME
       LMEProblemType b ! LMEProblemType
       integer z
       end subroutine
      subroutine LMESetTolerances(a,b,c,z)
      use slepclmedef
       LME a ! LME
       PetscReal b ! PetscReal
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine LMEGetDimensions(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine LMESetDimensions(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine LMESetErrorIfNotConverged(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine LMEGetErrorIfNotConverged(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine LMESolve(a,z)
      use slepclmedef
       LME a ! LME
       integer z
       end subroutine
      subroutine LMEGetIterationNumber(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine LMEGetConvergedReason(a,b,z)
      use slepclmedef
       LME a ! LME
       LMEConvergedReason b ! LMEConvergedReason
       integer z
       end subroutine
      subroutine LMEGetErrorEstimate(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine LMEComputeError(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscReal b ! PetscReal
       integer z
       end subroutine
