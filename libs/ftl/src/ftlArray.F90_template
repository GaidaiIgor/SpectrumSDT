! Copyright (c) 2017  Robert RÃ¼ger
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.

#define FTL_CONTAINER ftlArray
#define FTL_CONTAINER_IS_PLAIN_ARRAY
#define FTL_CONTAINER_PROVIDES_RANDOM_ACCESS_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlArray
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlArray
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif


module CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif

   implicit none
   private

   ! No ftlArray type; that is just a plain Fortran array.
   ! But we need to provide free methods that return the iterators!

   public :: Begin
   interface Begin
      module procedure BeginArray
   end interface

   public :: End
   interface End
      module procedure EndArray
   end interface


! ====== Type of an iterator over a plain Fortran array ==========================================================================

   type, public :: CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)
      private

      FTL_TEMPLATE_TYPE_WRAP, pointer         :: array(:) => null()
      integer                                 :: index = 0
      FTL_TEMPLATE_TYPE_WRAP, pointer, public :: value => null()

   contains
      private

      procedure         :: NewItDefault
      procedure         :: NewItCopyOther
      generic  , public :: New => NewItDefault, NewItCopyOther

      procedure, public :: Inc
      procedure, public :: Dec

   end type

   public :: operator(+)
   interface operator(+)
      module procedure AdvanceN
   end interface

   public :: operator(-)
   interface operator(-)
      module procedure ReverseN, DiffOther
   end interface

   public :: operator(==)
   interface operator(==)
      module procedure EqualOther
   end interface

   public :: operator(/=)
   interface operator(/=)
      module procedure UnequalOther
   end interface

   public :: operator(<)
   interface operator(<)
      module procedure SmallerOther
   end interface

   public :: operator(<=)
   interface operator(<=)
      module procedure SmallerEqualOther
   end interface

   public :: operator(>)
   interface operator(>)
      module procedure GreaterOther
   end interface

   public :: operator(>=)
   interface operator(>=)
      module procedure GreaterEqualOther
   end interface


contains



   type(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function BeginArray(array) result(Begin)
      FTL_TEMPLATE_TYPE_WRAP, intent(in), target :: array(:)

      Begin%array => array
      Begin%index = 1
      if (size(array) /= 0) Begin%value => array(1)

   end function



   type(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function EndArray(array) result(End)
      FTL_TEMPLATE_TYPE_WRAP, intent(in), target :: array(:)

      End%array => array
      End%index = size(array) + 1

   end function



! ====== Implementation of ftlArrayIterator methods ==============================================================================



   subroutine NewItDefault(self)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      nullify(self%array)
      self%index = 0
      nullify(self%value)

   end subroutine
   !
   subroutine NewItCopyOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)  :: other

      self%array => other%array
      self%index = other%index
      if (size(self%array) > 0 .and. self%index <= size(self%array)) self%value => self%array(self%index)

   end subroutine



   ! =============> Arithmetic operations:



   subroutine Inc(self)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%index = self%index + 1
      if (self%index <= size(self%array)) then
         self%value => self%array(self%index)
      else
         nullify(self%value)
      endif

   end subroutine
   !
   subroutine Dec(self)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%index = self%index - 1
      if (self%index > 0) then
         self%value => self%array(self%index)
      else
         nullify(self%value)
      endif

   end subroutine



   type(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function AdvanceN(self, n)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      integer                                              , intent(in) :: n

      call AdvanceN%New(self)
      AdvanceN%index = AdvanceN%index + n
      if (AdvanceN%index <= size(AdvanceN%array)) then
         AdvanceN%value => AdvanceN%array(AdvanceN%index)
      else
         nullify(AdvanceN%value)
      endif

   end function
   !
   type(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function ReverseN(self, n)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      integer                                              , intent(in) :: n

      call ReverseN%New(self)
      ReverseN%index = ReverseN%index - n
      if (ReverseN%index > 0) then
         ReverseN%value => ReverseN%array(ReverseN%index)
      else
         nullify(ReverseN%value)
      endif

   end function



   pure integer function DiffOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      if (associated(self%array,other%array)) then
         DiffOther = self%index - other%index
      else
         DiffOther = huge(0)
      endif

   end function



   ! =============> Logical operations:



   pure logical function EqualOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      if (associated(self%array) .and. associated(other%array)) then
         if (size(self%array) == 0 .and. size(other%array) == 0) then
            ! Special case: For size 0 arrays, all iterators compare equal. This
            ! is so that we get Begin == End on zero sized arrays.  For some
            ! reason it seems like it's not possible to have two pointers to the
            ! same 0 sized array associated with each other, so the normal
            ! branch below does not work ...
            EqualOther = .true.
         else
            EqualOther = associated(self%array,other%array) .and. (self%index == other%index)
         endif
      else
         EqualOther = .false.
      endif

   end function
   !
   pure logical function UnequalOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      UnequalOther = .not.(self == other)

   end function
   !
   pure logical function SmallerOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      if (associated(self%array) .and. associated(other%array)) then
         if (size(self%array) == 0 .and. size(other%array) == 0) then
            ! Special case: See above ...
            SmallerOther = .true.
         else
            SmallerOther = associated(self%array,other%array) .and. (self%index < other%index)
         endif
      else
         SmallerOther = .false.
      endif

   end function
   !
   pure logical function SmallerEqualOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      SmallerEqualOther = (self < other) .or. (self == other)

   end function
   !
   pure logical function GreaterOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      GreaterOther = .not.(self <= other)

   end function
   !
   pure logical function GreaterEqualOther(self, other)
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      GreaterEqualOther = .not.(self < other)

   end function


end module
#endif
