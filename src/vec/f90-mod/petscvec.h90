#if defined(PETSC_HAVE_FORTRAN_TYPE_STAR)
      Interface
       subroutine PetscSFBcastBegin(sf,unit,rarray,larray,ierr)
          use petscisdef
          PetscSF :: sf
          PetscMPIInt :: unit
          type(*) :: rarray(:)
          type(*) :: larray(:)
          PetscErrorCode :: ierr
        end Subroutine PetscSFBcastBegin

      subroutine PetscSFBcastEnd(sf,unit,rarray,larray,ierr)
          use petscisdef
          PetscSF :: sf
          PetscMPIInt :: unit
          type(*) :: rarray(:)
          type(*) :: larray(:)
          PetscErrorCode :: ierr
        end Subroutine PetscSFBcastEnd
      end Interface
#endif

      Interface
      subroutine PetscSFGetGraph(sf,nroots,nleaves,ilocal,iremote,ierr)
          use petscisdef
          PetscSF :: sf
          PetscInt :: nroots,nleaves
          PetscInt, pointer :: ilocal(:)
          type(PetscSFNode), pointer :: iremote(:)
          PetscErrorCode :: ierr
      end Subroutine PetscSFGetGraph
      end Interface

      Interface VecGetOwnershipRange
      subroutine VecGetOwnershipRange1(x,l,h,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  l,h
       PetscErrorCode, intent(out) :: ierr
       end subroutine
      subroutine VecGetOwnershipRange2(x,l,h,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  l(*),h
       PetscErrorCode, intent(out) :: ierr
       end subroutine
      subroutine VecGetOwnershipRange3(x,l,h,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  l,h(*)
       PetscErrorCode, intent(out) :: ierr
       end subroutine
       end Interface

      Interface VecMin
      subroutine VecMin1(x,p,val,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  p
       PetscReal, intent(out) ::  val
       PetscErrorCode, intent(out) :: ierr
       end subroutine
      subroutine VecMin2(x,p,val,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  p(*)
       PetscReal, intent(out) ::  val
       PetscErrorCode, intent(out) :: ierr
       end subroutine
      end Interface

      Interface VecMax
      subroutine VecMax1(x,p,val,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  p
       PetscReal, intent(out) ::  val
       PetscErrorCode, intent(out) :: ierr
       end subroutine
      subroutine VecMax2(x,p,val,ierr)
      use petscvecdef
       Vec, intent(in) :: x
       PetscInt, intent(out) ::  p(*)
       PetscReal, intent(out) ::  val
       PetscErrorCode, intent(out) :: ierr
       end subroutine
      end Interface

      Interface
      subroutine VecScatterCreateToAll(a,b,c,z)
      use petscvecdef
       Vec a
       VecScatter b
       Vec c
       PetscErrorCode z
       end subroutine
      end Interface

      Interface
      subroutine VecScatterCreateToZero(a,b,c,z)
      use petscvecdef
       Vec a
       VecScatter b
       Vec c
       PetscErrorCode z
       end subroutine
      end Interface

      Interface VecSetValuesLocal
        subroutine VecSetValuesLocal0(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscScalar d (*) ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
        subroutine VecSetValuesLocal11(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
      end interface VecSetValuesLocal

      Interface VecGetValues
        subroutine VecGetValues0(a,b,c,d,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscScalar d (*) ! PetscScalar
          PetscErrorCode z
        end subroutine
        subroutine VecGetValues1(a,b,c,d,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d (*) ! PetscScalar
          PetscErrorCode z
        end subroutine
        subroutine VecGetValues11(a,b,c,d,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d ! PetscScalar
          PetscErrorCode z
        end subroutine
      End Interface VecGetValues

      Interface VecSetValues
        subroutine VecSetValues0(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscScalar d (*) ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
        subroutine VecSetValues1(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d (*) ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
        subroutine VecSetValues11(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
      End Interface VecSetValues

      Interface VecSetValuesBlocked
        subroutine VecSetValuesBlocked0(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscScalar d (*) ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
        subroutine VecSetValuesBlocked1(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d (*) ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
        subroutine VecSetValuesBlocked11(a,b,c,d,e,z)
          use petscvecdef
          Vec a ! Vec
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscScalar d ! PetscScalar
          InsertMode e ! InsertMode
          PetscErrorCode z
        end subroutine
      End Interface VecSetValuesBlocked

      Interface
        Subroutine VecGetArrayF90(v,array,ierr)
          use petscvecdef
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecRestoreArrayF90(v,array,ierr)
          use petscvecdef
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecGetArrayReadF90(v,array,ierr)
          use petscvecdef
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecRestoreArrayReadF90(v,array,ierr)
          use petscvecdef
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface

      Interface
        Subroutine VecSetValuesSectionF90(v,s,p,va,mode,ierr)
          use petscvecdef
          PetscScalar, pointer :: va(:)
          PetscErrorCode ierr
          Vec     v
          PetscSection s
          PetscInt p
          InsertMode mode
        End Subroutine
      End Interface

! -------------------------------------------------------------

      Interface
        Subroutine VecDuplicateVecsF90(v,m,vs,ierr)
          use petscvecdef
          Vec, pointer :: vs(:)
          PetscInt m
          PetscErrorCode ierr
          Vec     v
        End Subroutine
      End Interface
!
!  Question: should VecDestroyVecsF90() take the m argument since
! the array of vectors already knows how long it is? Yes, to
! match calling sequence for C/C++.
!
      Interface
        Subroutine VecDestroyVecsF90(m,vs,ierr)
          use petscvecdef
          Vec, pointer :: vs(:)
          PetscInt m
          PetscErrorCode ierr
        End Subroutine
      
        subroutine VecSetType(a,b,ierr)
         use petscvecdef
         Vec a
         character(*) b
         PetscErrorCode ierr
       end subroutine

       subroutine VecView(a,b,ierr)
         use petscvecdef
         Vec a
         PetscViewer b
         PetscErrorCode ierr
       end subroutine
      
       subroutine VecScatterRemap(a,b,c,ierr)
         use petscvecdef
         VecScatter a ! VecScatter
         PetscInt b (*) ! PetscInt
         PetscInt c (*) ! PetscInt
         PetscErrorCode ierr
       end subroutine

       subroutine VecLoad(a,b,ierr)
         use petscvecdef
         Vec a
         PetscViewer b
         PetscErrorCode ierr
       end subroutine
      
      end Interface
