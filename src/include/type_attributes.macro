#if TYPE_ID == INTEGER_ID
#define TEMPLATE_TYPE integer
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME integer
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == REAL_ID
#define TEMPLATE_TYPE real*8
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME real
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE real*8

#elif TYPE_ID == COMPLEX_ID
#define TEMPLATE_TYPE complex*16
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME complex
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE complex*16



#elif TYPE_ID == INTEGER_ARRAY_ID
#define TEMPLATE_TYPE integer, dimension(:)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE, allocatable
#define TEMPLATE_TYPE_NAME integer_array
#define TEMPLATE_ELEMENTAL
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == REAL_ARRAY_ID
#define TEMPLATE_TYPE real*8, dimension(:)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE, allocatable
#define TEMPLATE_TYPE_NAME real_array
#define TEMPLATE_ELEMENTAL
#define TEMPLATE_INNER_TYPE real*8



#elif TYPE_ID == ARRAY_1D_INTEGER_ID
#define TEMPLATE_TYPE class(array_1d_integer)
#define TEMPLATE_TYPE_OUT type(array_1d_integer)
#define TEMPLATE_TYPE_NAME array_1d_integer
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == ARRAY_1D_REAL_ID
#define TEMPLATE_TYPE class(array_1d_real)
#define TEMPLATE_TYPE_OUT type(array_1d_real)
#define TEMPLATE_TYPE_NAME array_1d_real
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE real*8

#elif TYPE_ID == ARRAY_1D_COMPLEX_ID
#define TEMPLATE_TYPE class(array_1d_complex)
#define TEMPLATE_TYPE_OUT type(array_1d_complex)
#define TEMPLATE_TYPE_NAME array_1d_complex
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE complex*16



#elif TYPE_ID == VECTOR_INTEGER_ID
#define TEMPLATE_TYPE type(vector_integer)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME vector_integer
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == VECTOR_REAL_ID
#define TEMPLATE_TYPE type(vector_real)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME vector_real
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE real*8



#elif TYPE_ID == CHAR_STR_ID
#define TEMPLATE_TYPE character(*)
#define TEMPLATE_TYPE_OUT character(:), allocatable
#define TEMPLATE_TYPE_NAME char_str
#define TEMPLATE_ELEMENTAL
#define TEMPLATE_INNER_TYPE character(*)

#elif TYPE_ID == STRING_ID
#define TEMPLATE_TYPE class(string)
#define TEMPLATE_TYPE_OUT type(string)
#define TEMPLATE_TYPE_NAME string
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE character(*)

#else
#error invalid TYPE_ID

#endif
