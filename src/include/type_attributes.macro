/* The following attributes need to be defined for each known type: */
/* TEMPLATE_TYPE defines what to substitute where you want plain type name */
/* TEMPLATE_TYPE_OUT is used where type name is used to type output parameters. This might require additional specifications for some types */
/* TEMPLATE_TYPE_NAME defines a string name of the type, which can be used in the names of procedures */
/* TEMPLATE_ELEMENTAL is a placeholder for `elemental` keyword. Define this as an empty string for the types incompatible with `elemental` */
/* TEMPLATE_INNER_TYPE defines name of inner type for the case when a container is used as a template type */

#if TYPE_ID == INTEGER_ID
#define TEMPLATE_TYPE integer
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME integer
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == REAL_ID
#define TEMPLATE_TYPE real(real64)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME real
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE real(real64)

#elif TYPE_ID == COMPLEX_ID
#define TEMPLATE_TYPE complex(real64)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME complex
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE complex(real64)



#elif TYPE_ID == INTEGER_ARRAY_ID
#define TEMPLATE_TYPE integer, dimension(:)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE, allocatable
#define TEMPLATE_TYPE_NAME integer_array
#define TEMPLATE_ELEMENTAL
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == REAL_ARRAY_ID
#define TEMPLATE_TYPE real(real64), dimension(:)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE, allocatable
#define TEMPLATE_TYPE_NAME real_array
#define TEMPLATE_ELEMENTAL
#define TEMPLATE_INNER_TYPE real(real64)



#elif TYPE_ID == ARRAY_1D_INTEGER_ID
#define TEMPLATE_TYPE class(array_1d_integer)
#define TEMPLATE_TYPE_OUT type(array_1d_integer)
#define TEMPLATE_TYPE_NAME array_1d_integer
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == ARRAY_1D_REAL_ID
#define TEMPLATE_TYPE class(array_1d_real)
#define TEMPLATE_TYPE_OUT type(array_1d_real)
#define TEMPLATE_TYPE_NAME array_1d_real
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE real(real64)

#elif TYPE_ID == ARRAY_1D_COMPLEX_ID
#define TEMPLATE_TYPE class(array_1d_complex)
#define TEMPLATE_TYPE_OUT type(array_1d_complex)
#define TEMPLATE_TYPE_NAME array_1d_complex
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE complex(real64)



#elif TYPE_ID == VECTOR_INTEGER_ID
#define TEMPLATE_TYPE type(vector_integer)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME vector_integer
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE integer

#elif TYPE_ID == VECTOR_REAL_ID
#define TEMPLATE_TYPE type(vector_real)
#define TEMPLATE_TYPE_OUT TEMPLATE_TYPE
#define TEMPLATE_TYPE_NAME vector_real
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE real(real64)



#elif TYPE_ID == CHAR_STR_ID
#define TEMPLATE_TYPE character(*)
#define TEMPLATE_TYPE_OUT character(:), allocatable
#define TEMPLATE_TYPE_NAME char_str
#define TEMPLATE_ELEMENTAL
#define TEMPLATE_INNER_TYPE character(*)

#elif TYPE_ID == STRING_ID
#define TEMPLATE_TYPE class(string)
#define TEMPLATE_TYPE_OUT type(string)
#define TEMPLATE_TYPE_NAME string
#define TEMPLATE_ELEMENTAL elemental
#define TEMPLATE_INNER_TYPE character(*)

#else
#error invalid TYPE_ID

#endif
